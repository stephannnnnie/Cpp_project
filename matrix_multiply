#include <iostream>
#include <random>
#include <chrono>
#include <iomanip>
#include <immintrin.h>
#include <intrin.h>

using namespace std;
struct matrices {
    int row_number;
    int column_number;
    float** pData;
};
int main() {
    matrices A;
    cin >> A.row_number >> A.column_number;
    A.pData = new float* [A.row_number];
    for (int i = 0; i < A.row_number; ++i) {
        A.pData[i] = new float[A.column_number];
    }

    matrices B;
    cin >> B.row_number >> B.column_number;
    while (A.column_number != B.row_number) {
        cin.clear();
        cin.ignore();
        cout << "The matrices do not match. Please adjust your input."<<endl;
        cin >> B.row_number >> B.column_number;
    }
    B.pData = new float* [B.row_number];
    for (int i = 0; i < B.row_number; ++i) {
        B.pData[i] = new float[B.column_number];
    }

    matrices C;
    C.pData = new float* [A.row_number];
    for (int i = 0; i < A.row_number; ++i) {
        C.pData[i] = new float[B.column_number];
    }
    random_device randomDevice;
    mt19937 gen(randomDevice());
    uniform_real_distribution<float> dis(-3.0f, 3.0f);
    for (int i = 0; i < A.row_number; ++i) {
        for (int j = 0; j < A.column_number; ++j) {
            A.pData[i][j] = dis(gen);
        }
    }
    for (int i = 0; i < B.row_number; ++i) {
        for (int j = 0; j < B.column_number; ++j) {
            B.pData[i][j] = dis(gen);
        }
    }
    int N = A.column_number;
    auto start = chrono::steady_clock::now();
    //    for (int i = 0; i < A.row_number; ++i) {
    //        for (int j = 0; j < B.column_number; ++j) {
    //            C.pData[i][j]=0.0f;
    //            for (int k = 0; k < N; ++k) {
    //                C.pData[i][j]+=A.pData[i][N]*B.pData[N][j];
    //            }
    //        }
    //    }

    __m256 m, a, b;
    __m256 c = _mm256_setzero_ps();

       __m256** p_A = (__m256**)A.pData;
        __m256** p_B = (__m256**)B.pData;
        __m256** p_C = (__m256**)C.pData;
    int  m1 = A.row_number/8, n1 = A.column_number/8, l1 = B.column_number/8;
    for (int i = 0; i < m1; ++i) {
        for (int j = 0; j < l1; ++j) {
            p_C[i][j]=_mm256_set1_ps(0.0f);
            //c = _mm256_setzero_ps();
            for (int k = 0; k < n1; ++k) {
                /*a = _mm256_load_ps(A.pData[i]);
                b = _mm256_load_ps(B.pData[k]);
                c = _mm256_add_ps(c, _mm256_mul_ps(a, b));*/
                m=_mm256_mul_ps(p_A[i][k],p_B[k][j]);
                p_C[i][j]=_mm256_add_ps(m,p_C[i][j]);
            }
            C.pData[i][j]=_mm256_cvtss_f32(p_C[i][j]);
            //C.pData[i][j] = _mm256_cvtss_f32(c);
        }
    }
 
    auto end = chrono::steady_clock::now();
    cout << "calculation time:" << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << " ms" << endl;
    cout << "calculation time:" << std::chrono::duration_cast<std::chrono::seconds>(end - start).count() << " s" << endl;

  /*  for (int i = 0; i < A.row_number; ++i) {
        for (int j = 0; j < B.column_number; ++j) {
            cout << C.pData[i][j] << " ";
        }
        cout << endl;
    }*/

    delete[] A.pData;
    delete[] B.pData;
    delete[] C.pData;
}

